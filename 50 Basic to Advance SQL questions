
CREATE DATABASE ORG;

SHOW DATABASES;

USE ORG;

CREATE TABLE Worker (
	WORKER_ID INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	FIRST_NAME CHAR(25),
	LAST_NAME CHAR(25),
	SALARY INT(15),
	JOINING_DATE DATETIME,
	DEPARTMENT CHAR(25)
);

INSERT INTO Worker 
	(WORKER_ID, FIRST_NAME, LAST_NAME, SALARY, JOINING_DATE, DEPARTMENT) VALUES
		(001, 'Monika', 'Arora', 100000, '21-02-20 09.00.00', 'HR'),
		(002, 'Niharika', 'Verma', 80000, '21-06-11 09.00.00', 'Admin'),
		(003, 'Vishal', 'Singhal', 300000, '21-02-20 09.00.00', 'HR'),
		(004, 'Amitabh', 'Singh', 500000, '21-02-20 09.00.00', 'Admin'),
		(005, 'Vivek', 'Bhati', 500000, '21-06-11 09.00.00', 'Admin'),
		(006, 'Vipul', 'Diwan', 200000, '21-06-11 09.00.00', 'Account'),
		(007, 'Satish', 'Kumar', 75000, '21-01-20 09.00.00', 'Account'),
		(008, 'Geetika', 'Chauhan', 90000, '21-04-11 09.00.00', 'Admin');
        
CREATE TABLE Bonus (
	WORKER_REF_ID INT,
	BONUS_AMOUNT INT(10),
	BONUS_DATE DATETIME,
	FOREIGN KEY (WORKER_REF_ID)
		REFERENCES Worker(WORKER_ID)
        ON DELETE CASCADE
);

INSERT INTO Bonus 
	(WORKER_REF_ID, BONUS_AMOUNT, BONUS_DATE) VALUES
		(001, 5000, '23-02-20'),
		(002, 3000, '23-06-11'),
		(003, 4000, '23-02-20'),
		(001, 4500, '23-02-20'),
		(002, 3500, '23-06-11');
        
CREATE TABLE Title (
	WORKER_REF_ID INT,
	WORKER_TITLE CHAR(25),
	AFFECTED_FROM DATETIME,
	FOREIGN KEY (WORKER_REF_ID)
		REFERENCES Worker(WORKER_ID)
        ON DELETE CASCADE
);

INSERT INTO Title 
	(WORKER_REF_ID, WORKER_TITLE, AFFECTED_FROM) VALUES
 (001, 'Manager', '2023-02-20 00:00:00'),
 (002, 'Executive', '2023-06-11 00:00:00'),
 (008, 'Executive', '2023-06-11 00:00:00'),
 (005, 'Manager', '2023-06-11 00:00:00'),
 (004, 'Asst. Manager', '2023-06-11 00:00:00'),
 (007, 'Executive', '2023-06-11 00:00:00'),
 (006, 'Lead', '2023-06-11 00:00:00'),
 (003, 'Lead', '2023-06-11 00:00:00');
 
 /* TABLE CREATION AND DATA LOADING DONE NOW THE DATA ANALYSIS PART STARTS */
 
 -- Q-1. Write an SQL query to fetch “FIRST_NAME” from the Worker table using the alias name <WORKER_NAME>. --
 select FIRST_NAME as WORKER_NAME from worker;
 
 -- Q-2. Write an SQL query to fetch “FIRST_NAME” from the Worker table in upper case. --
 select upper(FIRST_NAME) from worker;
 
 -- Q-3. Write an SQL query to fetch unique values of DEPARTMENT from the Worker table. --
 select distinct(DEPARTMENT) from worker;
 
 -- Q-4. Write an SQL query to print the first three characters of  FIRST_NAME from the Worker table. --
 select substring(FIRST_NAME,1,3) from worker;
 
 -- Q-5. Write an SQL query to find the position of the alphabet (‘a’) in the first name column ‘Amitabh’ from the Worker table. --
 select instr('Amitabh',BINARY'a') from worker where FIRST_NAME= 'Amitabh';
 
 -- Q-6. Write an SQL query to print the FIRST_NAME from the Worker table after removing white spaces from the right side. --
 Select RTRIM(FIRST_NAME) from Worker;
 
 -- Q-7. Write an SQL query to print the DEPARTMENT from the Worker table after removing white spaces from the left side. --
 select LTRIM(DEPARTMENT) from Worker;
 
 -- Q-8. Write an SQL query that fetches the unique values of DEPARTMENT from the Worker table and prints its length. --
 select distinct length(DEPARTMENT) from worker;
 
 -- Q-9. Write an SQL query to print the FIRST_NAME from the Worker table after replacing ‘a’ with ‘A’. --
 select replace(FIRST_NAME,'a','A') from worker;
 
 -- Q-10. Write an SQL query to print the FIRST_NAME and LAST_NAME from the Worker table into a single column COMPLETE_NAME. A space char should separate them. --
 select concat(FIRST_NAME, ' ',LAST_NAME) from worker;
 
 -- Q-11. Write an SQL query to print all Worker details from the Worker table order by FIRST_NAME Ascending. --
 select * from worker order by FIRST_NAME asc;
 
 /*  Q-12. Write an SQL query to print all Worker details from the Worker table order by FIRST_NAME Ascending and DEPARTMENT Descending. */
select * from worker order by FIRST_NAME asc, DEPARTMENT desc;

/*   Q-13. Write an SQL query to print details for Workers with the first names “Vipul” and “Satish” from the Worker table.  */
select * from worker where FIRST_NAME in ('Vipul','Satish');

/*   Q-14. Write an SQL query to print details of workers excluding first names, “Vipul” and “Satish” from the Worker table.  */
select * from worker where FIRST_NAME NOT IN ('Vipul','Satish');

/*   Q-15. Write an SQL query to print details of Workers with DEPARTMENT name as “Admin”.   */
select * from worker where department="Admin";
select * from worker where department like 'Admin';

/*  Q-16. Write an SQL query to print details of the Workers whose FIRST_NAME contains ‘a’.  */
select * from worker where FIRST_NAME like '%a%';

/*	Q-17. Write an SQL query to print details of the Workers whose FIRST_NAME ends with ‘a’.  */
select * from worker where FIRST_NAME like '%a';

/*  Q-18. Write an SQL query to print details of the Workers whose FIRST_NAME ends with ‘h’ and contains six alphabets.  */
select * from worker where FIRST_NAME like '______h';

-- Q-19. Write an SQL query to print details of the Workers whose SALARY lies between 100000 and 500000--
select * from worker where salary between 100000 and 500000;

-- Q-20. Write an SQL query to print details of the Workers who joined in Feb 2021.  --
select * from worker where year(JOINING_DATE)=2021 and month(JOINING_DATE)=02;

-- Q-21. Write an SQL query to fetch the count of employees working in the department ‘Admin’.  --
select count(*) from worker where DEPARTMENT='Admin';

-- Q-22. Write an SQL query to fetch worker names with salaries >= 50000 and <= 100000. --
select concat(FIRST_NAME," ",LAST_NAME) as Worker_ID,salary 
where worker_ID in (select WORKER_ID from Worker where salary between 50000 and 100000);

-- Q-23. Write an SQL query to fetch the number of workers for each department in descending order. --
SELECT DEPARTMENT, count(WORKER_ID) No_Of_Workers 
FROM worker 
GROUP BY DEPARTMENT 
ORDER BY No_Of_Workers DESC;

-- Q-24. Write an SQL query to print details of the Workers who are also Managers. --
select * from title;
select * from bonus;
select * from worker;

SELECT DISTINCT W.FIRST_NAME, T.WORKER_TITLE
FROM Worker as W
INNER JOIN Title as T
ON W.WORKER_ID = T.WORKER_REF_ID
AND T.WORKER_TITLE in ('Manager');

-- Q-25. Write an SQL query to fetch duplicate records having matching data in some fields of a table. --
SELECT worker_title, affected_from, count(*) from title
group by worker_title, affected_from having count(*)> 1;

-- Q-26. Write an SQL query to show only odd rows from a table. --
select * from worker where WORKER_ID% 2 <> 0;

-- Q-27. Write an SQL query to show only even rows from a table. --
select * from worker where worker_id % 2 = 0;

-- Q-28. Write an SQL query to clone a new table from another table. --
create table Worker_clone select * from Worker;
select * from  worker_clone;

-- Q-29. Write an SQL query to fetch intersecting records of two tables. --
(SELECT * FROM Worker)
union
(SELECT * FROM Worker_Clone);

-- Q-30. Write an SQL query to show records from one table that another table does not have. --
(select * from worker)
except
(select * from worker_clone);

-- Q-31. Write an SQL query to show the current date and time. --
select current_time(), curdate();

-- Q-32. Write an SQL query to show the top n (say 10) records of a table. --
select * from worker limit 10;

-- Q-33. Write an SQL query to determine the nth (say n=5) highest salary from a table. --
select * from worker where worker_id= 5;

-- Q-34. Write an SQL query to determine the 5th highest salary without using the TOP or limit method. --
SELECT Salary FROM Worker W1
WHERE 4 = (SELECT COUNT( DISTINCT ( W2.Salary ) )
 FROM Worker W2
 WHERE W2.Salary >= W1.Salary
 );
select distinct(salary),worker_id, concat(FIRST_NAME, " ",LAST_NAME) as name from worker
order by salary offset 4 rows fetch next 1 rows only;

-- Q-35. Write an SQL query to fetch the list of employees with the same salary. --
Select distinct W.WORKER_ID, W.FIRST_NAME, W.Salary 
from Worker W, Worker W1 
where W.Salary = W1.Salary 
and W.WORKER_ID != W1.WORKER_ID;

-- Q-36. Write an SQL query to show the second-highest salary from a table. --
select distinct(salary), worker_id,first_name from worker order by salary desc limit 3;
select * from worker where worker_id=3;
-- ANOTHER METHOD --
Select max(Salary) from Worker
where Salary not in (Select max(Salary) from Worker);

-- Q-37. Write an SQL query to show one row twice in the results from a table. --
select FIRST_NAME, DEPARTMENT from worker W where W.DEPARTMENT='HR' 
union all 
select FIRST_NAME, DEPARTMENT from Worker W1 where W1.DEPARTMENT='HR';

-- Q-38. Write an SQL query to fetch intersecting records of two tables. --
(SELECT * FROM Worker)
INTERSECT
(SELECT * FROM WorkerClone);

-- Q-39. Write an SQL query to fetch the first 50% of records from a table. --
SELECT *
FROM WORKER
WHERE WORKER_ID <= (SELECT count(WORKER_ID)/2 from Worker);

-- Q-40. Write an SQL query to fetch the departments that have less than five people in them. --
select * from worker;
select distinct(department) from worker where count(distinct(department)) > 5;
SELECT DEPARTMENT, COUNT(WORKER_ID) as 'Number of Workers' FROM Worker GROUP BY DEPARTMENT HAVING COUNT(WORKER_ID) < 5; 

-- Q-41. Write an SQL query to show all departments along with the number of people in there. --
select department, count(department) as "number of people" from worker group by department;

-- Q-42. Write an SQL query to show the last record from a table. --
select max(worker_id) from worker;
-- ANOTHER METHOD --
Select * from Worker where WORKER_ID = (SELECT max(WORKER_ID) from Worker);

-- Q-43. Write an SQL query to fetch the first row of a table. --
select * from worker where worker_id= (select max(worker_id) from worker);

-- Q-44. Write an SQL query to fetch the last five records from a table. --
select * from worker where worker_id >= 5;

-- Q-46. Write an SQL query to fetch three max salaries from a table. --
select distinct(salary) from worker order by salary desc limit 3;

-- Q-47. Write an SQL query to fetch three min salaries from a table. --
select distinct(salary) from worker order by salary asc limit 3;

-- Q-48. Write an SQL query to fetch nth max salaries from a table. --
/* THE BEST AND THE EASIEST WAY IS TO FIRST ORDER THE SALARY BY ASC OR DESC (AS REQUIRED) THEN LIMIT OR SELECT THE SALARY IN ACCORDANCE WITH THE Emp_ID */

-- Q-49. Write an SQL query to fetch departments along with the total salaries paid for each of them. --
select department, sum(salary) from worker order by department;
   
-- Q-50. Write an SQL query to fetch the names of workers who earn the highest salary. --
select FIRST_NAME, salary from worker where salary= (select max(salary) from worker);
